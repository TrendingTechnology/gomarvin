{{ $project_info  := .ProjectInfo -}}
{{ $modules       := .Modules -}}
// code generated by gomarvin. DO NOT EDIT

/** Api details and params */
export const API = {
  project_name: "{{$project_info.Name}}",
  base_url: "http://localhost:{{$project_info.Port}}",
  api_prefix: "{{$project_info.APIPrefix}}",
};

export const API_URL = `${API.base_url}${API.api_prefix}`

export async function FetchEndpoint(endpoint: Endpoint): Promise<Response> {
  let headers: Headers = new Headers();
  headers.append("Content-Type", "application/json");

  const base_url = API_URL

  let options: RequestInit = {
    method: endpoint.method,
    headers: headers,
    body: JSON.stringify(endpoint.body),
    redirect: "follow",
  };

  const response = await fetch(base_url, options);
  return response;
}

export interface Endpoint {
  url: string;
  method: string;
  controller_name: string;
  url_params: UrlParam[];
  body: BodyField[];
}

export interface UrlParam {
  field: string;
  type: string;
}

export interface BodyField {
  field: string;
  type: string;
  validate: string;
}

{{- if $modules }}
{{- range $module := $modules }}
{{ if $module.Endpoints -}}

{{- range $endpoint := $module.Endpoints }}
{{- if $endpoint.Body }}
export interface {{$endpoint.ControllerName}}Body  {
  {{- range $body_field := $endpoint.Body }}
  {{ if (eq $body_field.Type  "string" )    -}} {{$body_field.Field}}: string {{ end -}}
  {{- if or  
      ( eq $body_field.Type  "int"     ) 
      ( eq $body_field.Type  "int64"   ) 
      ( eq $body_field.Type  "int32"   ) 
      ( eq $body_field.Type  "int16"   ) 
      ( eq $body_field.Type  "int8"    ) 
      ( eq $body_field.Type  "uint"    ) 
      ( eq $body_field.Type  "uint64"  ) 
      ( eq $body_field.Type  "uint32"  ) 
      ( eq $body_field.Type  "uint16"  ) 
      ( eq $body_field.Type  "uint8"   ) 
      ( eq $body_field.Type  "float64" )
      ( eq $body_field.Type  "float32" )    -}} 
  {{$body_field.Field}}: number {{ end -}}
  {{ if (eq $body_field.Type  "time.Time" )    -}} {{$body_field.Field}}: any {{ end -}}
  {{ if (eq $body_field.Type  "bool"      )    -}} {{$body_field.Field}}: boolean {{ end -}}
  {{ end }}
}
{{ end }}
{{- end -}}


export const {{ConvertToLowercase $module.Name}}_endpoints = {
  {{- range $endpoint := $module.Endpoints }}
  {{$endpoint.ControllerName}} : {
      url: "{{$endpoint.URL}}",
      method: "{{$endpoint.Method}}",
      body: {},
    },
  {{- end }}
};

{{ end -}}
{{ end -}}
{{ end }}
